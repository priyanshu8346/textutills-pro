{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","react_default","a","createElement","className","style","myStyle","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","height","alert","concat","msg","Navbar","mode","href","title","aria-label","onClick","toggleMode","role","color","for","data","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","textFormStyle2","heading","value","onChange","event","target","rows","textFormStyle","disabled","length","newText","toUpperCase","showalert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","filter","element","defaultProps","about","App","setMode","_useState3","_useState4","setAlert","_useState5","backgroundColor","_useState6","settextFormStyle","_useState7","_useState8","settextFormStyle2","_useState9","_useState10","setColor","_useState11","_useState12","setData","_useState13","border","_useState14","setMyStyle","showAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.763a5129.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div className=\"container my-2\" style={props.myStyle}>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={props.myStyle}\r\n            >\r\n            <strong>What do Convert to Uppercase do?</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.myStyle}>\r\n             Text will get converted into Uppercase.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={props.myStyle}\r\n            >\r\n            <strong> What do Convert to Lowercase do?</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.myStyle}>\r\n              Text will get converted into Lowercase.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={props.myStyle}\r\n            >\r\n            <strong> What do Clear text and Copy text do?</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.myStyle}>\r\n              Clear text will clear the screen for you while copy text will copy whatever there is in textarea to clipboard.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height: '10vh'}}>\r\n      { props.alert&& <div>\r\n            <div className={`alert alert-${props.alert.type} \" role=\"alert`}>\r\n <strong>{props.alert.msg}</strong>\r\n</div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            \r\n            <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input \" type=\"checkbox\"\r\n  onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className={`form-check-label  text-${props.color} `} for=\"flexSwitchCheckDefault \">{props.data}</label>\r\n</div>\r\n\r\n</div>\r\n         \r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={ title: PropTypes.string, about: PropTypes.string}\r\nNavbar.defaultProps={\r\n    title: 'set title here',\r\n    about: 'set about'\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  const handleOnClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showalert(\"Converted to uppercase\",\"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleOnClick2=()=>{\r\n      let newText=text.toLowerCase();\r\n      setText(newText)\r\n      props.showalert(\"Converted to lowercase\",\"success\");\r\n  };\r\n  const clearText=()=>{\r\n      setText(\"\");\r\n      props.showalert(\"Text Cleared\",\"success\");\r\n  };\r\n  const copyText=()=>{\r\n    let text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text copied\",\"success\");\r\n  }\r\n  return (\r\n      <>\r\n    <div >\r\n      <div >\r\n      <h1 style={props.textFormStyle2}>{props.heading}</h1>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        {/* <label for=\"myBox\" className=\"form-label\">\r\n          Example Textarea\r\n        </label> */}\r\n        <textarea\r\n          className={`form-control `}\r\n          id=\"myBox\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          rows=\"8\"\r\n          style={props.textFormStyle}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary my-1\" disabled={text.length===0} onClick={handleOnClick}>\r\n        Convert to UpperCase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-1\" disabled={text.length===0} onClick={handleOnClick2}>\r\n        Convert to LowerCase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-1\" disabled={text.length===0} onClick={clearText}>\r\n        Clear Text\r\n      </button>\r\n        <button className=\"btn btn-primary mx-2 my-1\" disabled={text.length===0} onClick={copyText}>\r\n        Copy Text\r\n      </button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <h1  style={props.textFormStyle2}>Your text summary</h1>\r\n        <p  style={props.textFormStyle2}>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <h2  style={props.textFormStyle2}>Preview</h2>\r\n        <p  style={props.textFormStyle2}>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const [textFormStyle, settextFormStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n  const [textFormStyle2, settextFormStyle2] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n  const [color, setColor] = useState(\"dark\");\n\n  const [data, setData] = useState(\"Enable dark mode\");\n  const [myStyle, setMyStyle] = useState({\n    backgroundColor: \"white\",\n    color: \"black\",\n    border: \" 1px solid black\",\n  });\n  let showAlert = (message, type) => {\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n    setAlert({\n      msg: message,\n      type: type,\n    });\n  };\n\n  let toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      setColor(\"dark\");\n      setData(\"Enable dark mode\");\n      setMyStyle({\n        backgroundColor: \"white\",\n        color: \"black\",\n        border: \" 1px solid black\",\n      });\n      settextFormStyle({\n        color: \"black\",\n        backgroundColor: \"white\",\n      });\n      document.body.style.backgroundColor = \"white\";\n      settextFormStyle2({\n        color: \"black\",\n        backgroundColor: \"white\",\n      });\n      showAlert(\"Light mode enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      setColor(\"light\");\n      setData(\"Disable dark mode\");\n      setMyStyle({\n        backgroundColor: \"#343a40\",\n        color: \"white\",\n        border: \" 1px solid white\",\n      });\n      settextFormStyle({\n        color: \"white\",\n        backgroundColor: \"#343a40\",\n      });\n      document.body.style.backgroundColor = \"rgb(1 25 48)\";\n      settextFormStyle2({\n        color: \"white\",\n        backgroundColor: \"rgb(1 25 48)\",\n      });\n      showAlert(\"Dark mode enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"MY-APP\" about=\"About Us\"/>  */}\n      <Navbar\n        title=\"TextUtills\"\n        mode={mode}\n        toggleMode={toggleMode}\n        color={color}\n        data={data}\n      />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm\n          heading=\"Enter text to analyze\"\n          textFormStyle={textFormStyle}\n          textFormStyle2={textFormStyle2}\n          showalert={showAlert}\n        />\n        <About myStyle={myStyle} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}